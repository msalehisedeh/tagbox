import { OnInit, ElementRef, Renderer, EventEmitter } from '@angular/core';
import { DragDropPolicy, Selectionpolicy, EditPolicy } from '../interfaces/tagbox.interfaces';
import { InToPipe } from 'into-pipes';
export declare class TagComponent implements OnInit {
    private into;
    el: ElementRef;
    private renderer;
    editMode: boolean;
    originalName: string;
    selectedFiller: number;
    fillerList: string[];
    onfocus: EventEmitter<{}>;
    onchange: EventEmitter<{}>;
    onselect: EventEmitter<{}>;
    onremove: EventEmitter<{}>;
    onadd: EventEmitter<{}>;
    ondrop: EventEmitter<{}>;
    format: string;
    removable: boolean;
    maxlength: string;
    name: string;
    placeholder: boolean;
    autocomplete: string[];
    selectionpolicy: Selectionpolicy;
    editpolicy: EditPolicy;
    dragpolicy: DragDropPolicy;
    editor: any;
    selector: any;
    filler: any;
    constructor(into: InToPipe, el: ElementRef, renderer: Renderer);
    ngOnInit(): void;
    dragStart(event: any): void;
    drag(event: any): void;
    dragEnd(event: any): void;
    drop(event: any): void;
    dragEnter(event: any): void;
    dragLeave(event: any): void;
    dragOver(event: any): void;
    allowDrop(event: any): boolean;
    allowDrag(): boolean;
    keyup(event: any): void;
    click(event: any): void;
    focus(event: any): void;
    isRemovable(): boolean;
    isEditable(): boolean;
    isDraggable(): boolean;
    isSelectable(): boolean;
    select(): void;
    tabout(event: any): void;
    edit(event: any): void;
    updateFillerList(value: any): void;
    init(): void;
    reset(): void;
    remove(): void;
    formattedName(): string;
}
