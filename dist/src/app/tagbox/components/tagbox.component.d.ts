import { OnInit, OnChanges, EventEmitter, ElementRef, Renderer } from '@angular/core';
import { DragDropPolicy, Selectionpolicy, EditPolicy } from '../interfaces/tagbox.interfaces';
import { TagComponent } from './tag.component';
export declare class TagBoxComponent implements OnInit, OnChanges {
    private renderer;
    private el;
    _tags: string[];
    _selectedindex: number[];
    onchange: EventEmitter<any>;
    onerror: EventEmitter<any>;
    onselect: EventEmitter<any>;
    onaction: EventEmitter<any>;
    beforeAction: (event: any) => boolean;
    boxTitle: string;
    id: string;
    placeholder: string;
    maxboxlength: number;
    maxtaglength: number;
    maxtags: number;
    mintags: number;
    formController: HTMLElement;
    tags: any;
    selectedindex: any;
    delineateby: string;
    format: string;
    autocomplete: string[];
    selectionpolicy: Selectionpolicy;
    editpolicy: EditPolicy;
    dragpolicy: DragDropPolicy;
    constructor(renderer: Renderer, el: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    itemSelectedAt(index: any): boolean;
    itemSelectionClass(index: any): "selected" | "left-padded" | "";
    isRemovable(): boolean;
    private isDuplicate;
    private allowedToaddItem;
    private notifyChange;
    private notifySelection;
    private createDropRequest;
    private prependTagAt;
    private appendTagAt;
    removeTagWithName(name: any): void;
    addTagWithName(name: any): boolean;
    onTagRemove(event: TagComponent): void;
    onTagAdd(event: TagComponent): void;
    onTagChange(event: TagComponent): void;
    onTagDrop(event: any): void;
    onTagAction(event: any): void;
    onTagSelect(event: TagComponent): void;
    onTagFocus(event: TagComponent): void;
}
