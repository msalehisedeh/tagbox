{
  "version": 3,
  "file": "tagbox.umd.min.js",
  "sources": [
    "ng://tagbox/out/src/app/tagbox/components/tagbox.component.ts",
    "ng://tagbox/out/src/app/tagbox/components/tag.component.ts"
  ],
  "sourcesContent": [
    "/*\r\n * Comparision Tool will layout two comparision trees side by side and feed them an internal object\r\n * heirarchy created for internal use from JSON objects given to this component.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ElementRef,\r\n  Renderer\r\n} from '@angular/core';\r\n\r\nimport {\r\n  DragDropPolicy,\r\n  Selectionpolicy,\r\n  EditPolicy\r\n} from '../interfaces/tagbox.interfaces';\r\n\r\nimport { TagComponent } from './tag.component';\r\n\r\n@Component({\r\n  selector: 'tagbox',\r\n  template: `\r\n<tag theme\r\n    *ngFor=\"let t of _tags; let i=index\"\r\n    tabindex=\"0\"\r\n    [class]=\"itemSelectionClass(i)\"\r\n    [name]=\"t\"\r\n    [removable]=\"isRemovable()\"\r\n    [maxlength]=\"maxtaglength\"\r\n    [format]=\"format\"\r\n    [autocomplete]=\"autocomplete\"\r\n    [attr.role]=\"'listitem'\"\r\n    [selectionpolicy]=\"selectionpolicy\"\r\n    [editpolicy]=\"editpolicy\" \r\n    [dragpolicy]=\"dragpolicy\"\r\n    (ondrop)=\"onTagDrop($event)\"\r\n    (onchange)=\"onTagChange($event)\"\r\n    (onadd)=\"onTagAdd($event)\"\r\n    (onremove)=\"onTagRemove($event)\"\r\n    (onselect)=\"onTagSelect($event)\"\r\n    (onfocus)=\"onTagFocus($event)\">\r\n</tag><tag theme\r\n    placeholder\r\n    tabindex=\"0\"\r\n    name=\"\"\r\n    [class]=\"itemSelectionClass(-1)\"\r\n    [maxlength]=\"maxtaglength\"\r\n    [placeholder]=\"placeholder\"\r\n    [format]=\"format\"\r\n    [autocomplete]=\"autocomplete\"\r\n    [attr.role]=\"'listitem'\"\r\n    [selectionpolicy]=\"selectionpolicy\"\r\n    [editpolicy]=\"editpolicy\" \r\n    [dragpolicy]=\"dragpolicy\"\r\n    (ondrop)=\"onTagDrop($event)\"\r\n    (onchange)=\"onTagChange($event)\"\r\n    (onadd)=\"onTagAdd($event)\"\r\n    (onremove)=\"onTagRemove($event)\"\r\n    (onfocus)=\"onTagFocus($event)\"></tag>\r\n`,\r\n  styles: [`:host{\n  background-color:#fff;\n  border:1px inset #888;\n  -webkit-box-sizing:border-box;\n  box-sizing:border-box;\n  display:inline-block;\n  min-height:50px;\n  padding:5px;\n  width:100%;\n  border-radius:5px;\n  margin-bottom:5px; }\n  :host.alert{\n    background-color:#ff9f9b;\n    border-color:#880500; }\n\n:host:focus{\n  border-color:#0ba; }\n\n:host:hover{\n  background-color:#ddd; }\n`],\r\n})\r\nexport class TagBoxComponent implements OnInit, OnChanges {\r\n\r\n  _tags: string[] = [];\r\n  _selectedindex: number[] = [];\r\n  \r\n  @Output(\"onchange\")\r\n  onchange= new EventEmitter()\r\n\r\n  @Output(\"onselect\")\r\n  onselect= new EventEmitter()\r\n\r\n  @Input(\"beforeAction\")\r\n  beforeAction = (event) => true;\r\n\r\n  @Input(\"id\")\r\n  id: string;\r\n\r\n  @Input(\"placeholder\")\r\n  placeholder: string = \"Add Tag\";\r\n  \r\n  @Input(\"maxboxlength\")\r\n  maxboxlength: number;\r\n\r\n  @Input(\"maxtaglength\")\r\n  maxtaglength: number;\r\n\r\n  @Input(\"maxtags\")\r\n  maxtags: number;\r\n\r\n  @Input(\"mintags\")\r\n  mintags: number;\r\n\r\n  @Input(\"tags\")\r\n  tags: any;\r\n\r\n  @Input(\"selectedindex\")\r\n  selectedindex: any;\r\n\r\n  @Input(\"delineateby\")\r\n  delineateby: string;\r\n\r\n  @Input(\"format\")\r\n  format: string;\r\n\r\n  @Input(\"autocomplete\")\r\n  autocomplete: string[];\r\n\r\n  @Input(\"selectionpolicy\")\r\n  selectionpolicy: Selectionpolicy;\r\n\r\n  @Input(\"editpolicy\")\r\n  editpolicy: EditPolicy;\r\n\r\n  @Input(\"dragpolicy\")\r\n  dragpolicy: DragDropPolicy;\r\n\r\n\r\n  constructor(private renderer: Renderer, private el: ElementRef) {\r\n\t  \r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.selectedindex && \r\n        (this.selectedindex instanceof String) && \r\n        (this.tags && !(this.tags instanceof String))) {\r\n      const x: string = String(this.selectedindex);\r\n      const list = x.split(\",\");\r\n      list.map((t) => {\r\n        this._selectedindex.push(parseInt(t));\r\n      });\r\n    } else {\r\n      this._selectedindex = this.selectedindex;\r\n    }\r\n\r\n    if (this.tags && !(this.tags instanceof Array)) {\r\n      const x: string = String(this.tags);\r\n      this._tags = x.split(this.delineateby ? this.delineateby : \",\");\r\n    } else {\r\n      this._tags = this.tags;\r\n    }\r\n    this.renderer.setElementAttribute(this.el.nativeElement,\"role\",\"list\");\r\n  }\r\n\r\n  ngOnChanges(changes) {\r\n\r\n  }\r\n\r\n  itemSelectedAt(index) {\r\n    const canSelect = this.selectionpolicy !== Selectionpolicy.disabled;\r\n    return this._selectedindex.indexOf(index) < 0 ? false : canSelect;\r\n  }\r\n\r\n  itemSelectionClass(index) {\r\n    const selected = this.itemSelectedAt(index);\r\n    return selected ? \"selected\" : ((index < 0 || this.selectionpolicy === Selectionpolicy.disabled) ? \"left-padded\" : \"\");\r\n  }\r\n\r\n  isRemovable() {\r\n    let canRemove = (this.editpolicy === EditPolicy.addAndRemove);\r\n\r\n    canRemove = canRemove || (this.editpolicy === EditPolicy.removeOnly);\r\n\r\n    canRemove = canRemove && (!this.mintags || (this._tags.length > this.mintags));\r\n    \r\n    return  canRemove;\r\n  }\r\n\r\n  private isDuplicate(name) {\r\n    return this._tags.indexOf(name) < 0 ? false : true;\r\n  }\r\n\r\n  allowedToaddItem(tag) {\r\n    let canAdd = (this.editpolicy === EditPolicy.addAndRemove);\r\n\r\n    canAdd = canAdd || (this.editpolicy === EditPolicy.addOnly);\r\n\r\n    canAdd = canAdd && (!this.maxtags || (this._tags.length < this.maxtags-1));\r\n\r\n    canAdd = canAdd && !this.isDuplicate(tag.name);\r\n\r\n    if (canAdd && this.maxtaglength) {\r\n      const x = this._tags.join( this.delineateby ? this.delineateby : \",\");\r\n      if (x.length+tag.name.length+1 >= this.maxboxlength) {\r\n        canAdd = false;\r\n        this.renderer.setElementClass(this.el.nativeElement, \"alert\", true);\r\n      } else {\r\n        this.renderer.setElementClass(this.el.nativeElement, \"alert\", false);\r\n      }\r\n    }    \r\n    return  canAdd;\r\n  }\r\n\r\n  private notifyChange() {\r\n    this.tags = (this.tags instanceof Array) ? this._tags : this._tags.join( this.delineateby ? this.delineateby : \",\");\r\n    this.selectedindex = !(this.selectedindex instanceof Array) ? \r\n                          this._selectedindex : \r\n                          (this._selectedindex.length ? this._selectedindex.join(\",\") : \"\");\r\n    this.onchange.emit({\r\n      id: this.id,\r\n      tags: this.tags,\r\n      selecedIndex: this.selectedindex\r\n    });\r\n  }\r\n  private notifySelection() {\r\n    this.selectedindex = !(this.selectedindex instanceof Array) ? \r\n                        this._selectedindex : \r\n                        (this._selectedindex.length ? this._selectedindex.join(\",\") : \"\");\r\n    this.onselect.emit({\r\n      id: this.id,\r\n      selecedIndex: this.selectedindex\r\n    });\r\n  }\r\n  onTagRemove(event: TagComponent) {\r\n    if (this.isRemovable() && this.beforeAction({request:\"remove\", item: event.name})) {\r\n      const index = this._tags.indexOf(event.name);\r\n      const i = this._selectedindex.indexOf(index);\r\n\r\n      this._tags.splice(index,1);\r\n      if (i >= 0) {\r\n        this._selectedindex.splice(i,1);\r\n        this.notifyChange();\r\n      }\r\n    }\r\n  }\r\n\r\n  onTagAdd(event: TagComponent) {\r\n    let index = this._tags.indexOf(event.name);\r\n    const i = this._selectedindex.indexOf(index);\r\n    \r\n    if (index < 0  && \r\n        event.name.length && \r\n        this.allowedToaddItem(event) && \r\n        this.beforeAction({request:\"add\", item: event.name})) {\r\n      this._tags.push(event.name);\r\n      event.name = \"\";\r\n      this.notifyChange();\r\n      event.click(null);\r\n    } else {\r\n      event.reset();\r\n    }\r\n  }\r\n\r\n  onTagChange(event: TagComponent) {\r\n    if (!this.isDuplicate(event.name) && this.beforeAction({request:\"change\", item: event.originalName, to: event.name})) {\r\n      const index = this._tags.indexOf(event.originalName);\r\n      \r\n      this._tags[index] = event.name;\r\n      event.init();\r\n      this.notifyChange();\r\n    } else {\r\n      event.reset();\r\n    }\r\n  }\r\n\r\n  onTagDrop(event) {\r\n    const sind = this._tags.indexOf(event.source);\r\n    const dind = this._tags.indexOf(event.destination);\r\n\r\n    if (this.dragpolicy === DragDropPolicy.appendOnDrop) {\r\n      const i = this._selectedindex.indexOf(sind);\r\n      const name = event.destination + \" \" + event.source;\r\n      if (!this.maxtaglength ||  (this.maxtaglength && name.length <= this.maxtaglength)) {\r\n        if (this.beforeAction({request:\"drop\", action: \"append\", source: event.source, destination: event.destination})) {\r\n          this._tags[dind] = name;\r\n          this._tags.splice(sind,1);\r\n          this._selectedindex.splice(i,1);\r\n          this.notifyChange();\r\n        }\r\n      }\r\n    } else if (this.dragpolicy === DragDropPolicy.prependOnDrop) {\r\n      const i = this._selectedindex.indexOf(sind);\r\n      const name = event.source + \" \" + event.destination;\r\n      if (!this.maxtaglength ||  (this.maxtaglength && name.length <= this.maxtaglength)) {\r\n        if (this.beforeAction({request:\"drop\", action: \"prepend\", source: event.source, destination: event.destination})) {\r\n          this._tags[dind] = name;\r\n          this._tags.splice(sind,1);\r\n          this._selectedindex.splice(i,1);\r\n          this.notifyChange();\r\n        }\r\n      }\r\n    } if (this.dragpolicy === DragDropPolicy.swapOnDrop) {\r\n      if (this.beforeAction({request:\"drop\", action: \"swap\", source: event.source, destination: event.destination})) {\r\n        this._tags[sind] = this._tags.splice(dind, 1, this._tags[sind])[0];\r\n        this.notifyChange();\r\n      }\r\n    } \r\n  }\r\n  onTagSelect(event: TagComponent) {\r\n    if (this.selectionpolicy !== Selectionpolicy.disabled) {\r\n      this.onTagFocus(event);\r\n      if (this.beforeAction({request:\"select\", item: event.name})) {\r\n        if (this.selectionpolicy === Selectionpolicy.singleSelect) {\r\n          const list = this.el.nativeElement.childNodes;\r\n          for(let i=0; i < list.length; i++){\r\n            // 3 is text and 8 is comment\r\n            if (list[i].nodeType !== 3 && list[i].nodeType !== 8) {\r\n              this.renderer.setElementClass(list[i], \"selected\", false)\r\n            }\r\n          }\r\n          const index = this._tags.indexOf(event.name);\r\n          if (index >= 0) {\r\n            const i = this._selectedindex.indexOf(index);\r\n  \r\n            if (i < 0) {\r\n              this.renderer.setElementClass(event.el.nativeElement, \"selected\", true);\r\n              this._selectedindex = [index];\r\n            } else {\r\n              this.renderer.setElementClass(event.el.nativeElement, \"selected\", false)\r\n              this._selectedindex = [];\r\n            }\r\n            this.notifySelection();\r\n          }\r\n        } else {\r\n          const index = this._tags.indexOf(event.name);\r\n  \r\n          if (index >= 0) {\r\n            const i = this._selectedindex.indexOf(index);\r\n  \r\n            if (i < 0) {\r\n              this.renderer.setElementClass(event.el.nativeElement, \"selected\", true);\r\n              this._selectedindex.push(index);\r\n            } else {\r\n              this.renderer.setElementClass(event.el.nativeElement, \"selected\", false)\r\n              this._selectedindex.splice(i,1);\r\n            }\r\n            this.notifySelection();\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  onTagFocus(event: TagComponent) {\r\n    if (this.selectionpolicy !== Selectionpolicy.disabled) {\r\n      const list = this.el.nativeElement.childNodes;\r\n      for(let i=0; i < list.length; i++){\r\n        // 3 is text and 8 is comment\r\n        if (list[i].nodeType !== 3 && list[i].nodeType !== 8) {\r\n          this.renderer.setElementClass(list[i], \"focused\", false)\r\n        }\r\n      }\r\n      const index = this._tags.indexOf(event.name);\r\n      if (index >= 0) {\r\n        this.renderer.setElementClass(event.el.nativeElement, \"focused\", true);\r\n      }\r\n    }\r\n  }\r\n}\r\n",
    "/*\r\n * A comparision tree will layout each attribute of a json deep through its heirarchy with given visual queues\r\n * that represents a deletion, adition, or change of attribute from the other tree. The status of each node is \r\n * evaluated by the parent comparision tool.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  HostListener,\r\n  ElementRef,\r\n  Renderer,\r\n  ViewChild,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\nimport {\r\n  DragDropPolicy,\r\n  Selectionpolicy,\r\n  EditPolicy\r\n} from '../interfaces/tagbox.interfaces';\r\n\r\n@Component({\r\n  selector: 'tag',\r\n  template: `\r\n<span #selector\r\n    *ngIf=\"!editMode && removable && isSelectable()\" \r\n    tabindex=\"0\" \r\n    class=\"selection fa\"\r\n    (click)=\"select()\"></span>\r\n<input \r\n    *ngIf=\"editMode\" \r\n    class=\"editor\" \r\n    (blur)=\"tabout($event)\"\r\n    (keyup)=\"edit($event)\" \r\n    [value]=\"name\"\r\n    [attr.maxlength]=\"maxlength\"\r\n    [attr.placeholder]=\"placeholder\" #editor/>\r\n<div class=\"autocomplete off\" *ngIf=\"editMode && autocomplete\" #filler>\r\n  <ul>\r\n      <li *ngFor=\"let x of fillerList; let i = index\" \r\n        (click)=\"selectedFiller = i\" \r\n        [class.selected]=\"selectedFiller === i\"\r\n        [textContent]=\"x\"></li>\r\n  </ul>\r\n</div>\r\n<span \r\n    *ngIf=\"!editMode\" \r\n    class=\"holder\" \r\n    [textContent]=\"placeholder ? placeholder : formattedName()\"></span>\r\n<span \r\n    *ngIf=\"!editMode && removable\" \r\n    tabindex=\"0\" \r\n    class=\"remove fa fa-times\" \r\n    (click)=\"remove()\"></span>\r\n<span \r\n    *ngIf=\"!removable\" \r\n    class=\"placeholder fa fa-plus-circle\"></span>`,\r\n  styles: [`:host{\n  cursor:pointer;\n  color:#fdfdfd;\n  margin:4px 2px;\n  display:inline-block;\n  background-color:#1F84AB;\n  border:1px solid #015E85;\n  border-radius:8px 20px 20px 8px;\n  -webkit-box-sizing:border-box;\n          box-sizing:border-box;\n  padding:3px 0;\n  position:relative; }\n  :host.left-padded{\n    padding-left:8px; }\n  :host.drag-over:hover{\n    background-color:#add8e6;\n    cursor:move; }\n  :host[placeholder]{\n    background-color:transparent;\n    color:#000;\n    border:0; }\n    :host[placeholder]:hover{\n      background-color:#eee !important; }\n    :host[placeholder] .editor{\n      color:#000; }\n  :host:hover{\n    background-color:#027912 !important;\n    border-color:#024b0b !important; }\n  :host.focused{\n    background-color:#027912 !important;\n    border-color:#024b0b !important; }\n  :host.selected:hover{\n    background-color:#D6534E; }\n  :host.selected{\n    background-color:#D6534E; }\n    :host.selected .selection.fa:before{\n      content:\"\\\\f00c\" !important; }\n  :host .selection{\n    background-color:transparent;\n    float:left;\n    margin-right:3px;\n    padding:0;\n    width:10px;\n    height:10px;\n    font-size:0.8rem;\n    padding:5px 3px; }\n    :host .selection.fa:before{\n      content:\"\\\\f013\"; }\n  :host .editor{\n    background-color:transparent;\n    overflow:unset;\n    max-width:inherit;\n    width:inherit;\n    color:#fff;\n    border:none; }\n  :host .placeholder{\n    color:#888585;\n    float:right;\n    font-size:1rem;\n    height:20px;\n    line-height:20px;\n    margin-left:5px;\n    text-align:center;\n    width:20px; }\n  :host .remove{\n    float:right;\n    font-size:0.7rem;\n    height:20px;\n    width:20px;\n    color:#fff;\n    text-align:center;\n    margin-left:5px;\n    line-height:20px;\n    font-weight:bolder; }\n  :host .holder{\n    pointer-events:none;\n    -webkit-user-select:none;\n    -moz-user-select:none;\n    -ms-user-select:none;\n    user-select:none; }\n  :host .autocomplete{\n    position:absolute;\n    top:26px;\n    z-index:5; }\n    :host .autocomplete.off{\n      display:none; }\n    :host .autocomplete ul{\n      border:1px solid #024b0b;\n      border-top:0;\n      list-style:none;\n      background-color:#027912;\n      list-style-position:inside;\n      margin:0;\n      max-height:150px;\n      overflow-y:auto;\n      padding:0; }\n      :host .autocomplete ul li{\n        color:#fdfdfd;\n        padding:5px;\n        white-space:nowrap; }\n        :host .autocomplete ul li.selected{\n          background-color:#D6534E; }\n        :host .autocomplete ul li:hover{\n          background-color:#0446a8;\n          color:#fff; }\n`],\r\n})\r\nexport class TagComponent implements OnInit {\r\n  editMode: boolean;\r\n\r\n  originalName: string;\r\n  selectedFiller = -1;\r\n  fillerList: string[];\r\n\r\n  @Output(\"onfocus\")\r\n  onfocus= new EventEmitter()\r\n\r\n  @Output(\"onchange\")\r\n  onchange= new EventEmitter()\r\n\r\n  @Output(\"onselect\")\r\n  onselect= new EventEmitter()\r\n\r\n  @Output(\"onremove\")\r\n  onremove= new EventEmitter()\r\n\r\n  @Output(\"onadd\")\r\n  onadd= new EventEmitter()\r\n\r\n  @Output(\"ondrop\")\r\n  ondrop= new EventEmitter()\r\n\r\n  @Input(\"format\")\r\n  format: string;\r\n\r\n  @Input(\"removable\")\r\n  removable: boolean;\r\n\r\n  @Input(\"maxlength\")\r\n  maxlength: string;\r\n\r\n  @Input(\"name\")\r\n  name: string;\r\n\r\n  @Input(\"placeholder\")\r\n  placeholder: boolean;\r\n\r\n  @Input(\"autocomplete\")\r\n  autocomplete: string[];\r\n\r\n  @Input(\"selectionpolicy\")\r\n  selectionpolicy: Selectionpolicy;\r\n\r\n  @Input(\"editpolicy\")\r\n  editpolicy: EditPolicy;\r\n\r\n  @Input(\"dragpolicy\")\r\n  dragpolicy: DragDropPolicy;\r\n\r\n  @ViewChild(\"editor\")\r\n  editor;\r\n\r\n  @ViewChild(\"selector\")\r\n  selector;\r\n\r\n  @ViewChild(\"filler\")\r\n  filler;\r\n\r\n  constructor(\r\n    public el: ElementRef, \r\n    private renderer: Renderer\r\n  ){\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.init();\r\n    this.el.nativeElement.draggable = (this.dragpolicy !== DragDropPolicy.disabled);\r\n  }\r\n\r\n  @HostListener('dragstart', ['$event']) \r\n  dragStart(event) {\r\n      event.stopPropagation();\t\r\n      if (this.allowDrag()) {\r\n          event.dataTransfer.setData(\"source\",this.name);\r\n      }\r\n  }\r\n  @HostListener('drag', ['$event']) \r\n  drag(event) {}\r\n  \r\n  @HostListener('dragend', ['$event']) \r\n  dragEnd(event) {\r\n      event.stopPropagation();\t\r\n\r\n      this.renderer.setElementClass(this.el.nativeElement, \"drag-over\", false);\r\n  }\r\n  @HostListener('drop', ['$event'])\r\n  drop(event) {\r\n    event.preventDefault();\r\n    this.renderer.setElementClass(this.el.nativeElement, \"drag-over\", false);\r\n    this.ondrop.emit({\r\n      source: event.dataTransfer.getData(\"source\"),\r\n      destination: this.name\r\n    })\r\n  }\r\n  \r\n  @HostListener('dragenter', ['$event']) \r\n  dragEnter(event) {\r\n      event.preventDefault();\r\n      if (this.allowDrop(event)) {\r\n          this.renderer.setElementClass(this.el.nativeElement, \"drag-over\", true);\r\n      } else {\r\n          this.renderer.setElementClass(this.el.nativeElement, \"drag-over\", false);\r\n      }\r\n  }\r\n  \r\n  @HostListener('dragleave', ['$event']) \r\n  dragLeave(event) {\r\n      event.preventDefault();\r\n              \r\n      this.renderer.setElementClass(this.el.nativeElement, \"drag-over\", false);\r\n  }\r\n  \r\n  @HostListener('dragover', ['$event']) \r\n  dragOver(event) {\r\n      if (this.allowDrop(event)) {\r\n          event.preventDefault();\r\n          this.renderer.setElementClass(this.el.nativeElement, \"drag-over\", true);\r\n      } else {\r\n          this.renderer.setElementClass(this.el.nativeElement, \"drag-over\", false);\r\n      }\r\n  }\r\n  \r\n  allowDrop(event): boolean {\r\n      const source = event.dataTransfer.getData(\"source\");\r\n\r\n      return (source && source != this.name) && this.name && this.name.length > 0;\r\n  }\r\n\r\n  allowDrag() : boolean {\r\n    return (this.dragpolicy !== DragDropPolicy.disabled) && this.name && this.name.length > 0;\r\n  }\r\n\r\n  @HostListener('keyup', ['$event']) \r\n  keyup(event) {\r\n    if (event.target === this.el.nativeElement ||\r\n       (this.editor && event.target === this.editor.nativeElement)) {\r\n      const code = event.which;\r\n      if (code === 13) { // cariage return\r\n        this.click(event)\r\n      }else if (code === 9 && this.editMode) { // tab out\r\n        setTimeout(()=>{\r\n          this.editMode = false;\r\n          if (this.originalName.length && this.originalName !== this.name) {\r\n            this.onchange.emit(this);\r\n          } else {\r\n            this.onadd.emit(this);\r\n          }\r\n        }, 66);\r\n      }else if (code === 38) { // arrow up\r\n        if (this.filler) {\r\n          if (this.selectedFiller >= 0) {\r\n            this.selectedFiller--;\r\n          } else {\r\n            this.selectedFiller = this.fillerList.length - 1;\r\n          }         \r\n        }\r\n      } else if (code === 40) { // arrow down\r\n        if (this.filler) {\r\n          if (this.selectedFiller < (this.fillerList.length - 1)) {\r\n            this.selectedFiller++;\r\n          } else {\r\n            this.selectedFiller = -1;\r\n          }   \r\n        }\r\n      }\r\n    } else if (this.selector && event.target === this.selector.nativeElement) {\r\n      const code = event.which;\r\n      if (code === 13) { // cariage return\r\n        if (this.isSelectable()) {\r\n          this.onselect.emit(this)\r\n        }\r\n      }\r\n    } else {\r\n      const code = event.which;\r\n      if (code === 13) { // cariage return\r\n        this.remove();\r\n      }      \r\n    }\r\n  }\r\n\r\n  @HostListener('click', ['$event']) \r\n  click(event) {\r\n    if (this.selector && event.target === this.selector.nativeElement) {\r\n      if (this.isSelectable()) {\r\n        this.onselect.emit(this)\r\n      }\r\n    } else if (this.isEditable()) {\r\n      this.editMode = !this.editMode;\r\n      if (this.editMode) {\r\n        setTimeout(()=>{\r\n          if (this.filler) {\r\n            this.selectedFiller = -1;\r\n            this.updateFillerList(this.name);\r\n          }\r\n          if (this.editor) {\r\n            this.editor.nativeElement.focus();\r\n            if (this.filler) {\r\n              this.renderer.setElementClass(this.filler.nativeElement, \"off\", false);\r\n            }\r\n          }\r\n        },66);\r\n      } else if (this.selectedFiller >= 0) {\r\n        this.name = this.fillerList[this.selectedFiller];\r\n      }\r\n      if (this.originalName.length) {\r\n        if (this.originalName !== this.name) {\r\n          this.onchange.emit(this);\r\n        }\r\n        if (!this.editMode) {\r\n          setTimeout(()=>{this.el.nativeElement.focus() },66);\r\n        }\r\n      } else {\r\n        this.onadd.emit(this);\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('focus', ['$event']) \r\n  focus(event) {\r\n    if (this.isSelectable()) {\r\n      this.onfocus.emit(this)\r\n    }\r\n  }\r\n\r\n  isRemovable() {\r\n    let canRemove = (this.editpolicy === EditPolicy.addAndRemove);\r\n\r\n    canRemove = canRemove || (this.editpolicy === EditPolicy.removeOnly);\r\n    \r\n    return  canRemove;\r\n  }\r\n\r\n  isEditable() {\r\n    return  (this.editpolicy !== EditPolicy.viewOnly);\r\n  }\r\n\r\n  isDraggable() {\r\n    return  (this.dragpolicy !== DragDropPolicy.disabled);\r\n  }\r\n\r\n  isSelectable() {\r\n    return  (this.selectionpolicy !== Selectionpolicy.disabled);\r\n  }\r\n  select() {\r\n    \r\n  }\r\n\r\n  tabout(event) {\r\n    setTimeout(() => {\r\n      this.name = this.selectedFiller < 0 ? event.target.value : this.fillerList[this.selectedFiller];\r\n      this.editMode = false;\r\n      if (this.originalName.length && this.originalName !== this.name) {\r\n        this.onchange.emit(this);\r\n      } else {\r\n        this.onadd.emit(this);\r\n      }\r\n    }, 66)\r\n  }\r\n  edit(event) {\r\n    this.name = event.target.value;\r\n    this.updateFillerList(this.name);\r\n  }\r\n\r\n  updateFillerList(value) {\r\n    if (value && this.autocomplete instanceof Array){\r\n      if (value) {\r\n        this.fillerList = this.autocomplete.filter((item) => item.indexOf(value) >= 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  init() {\r\n    this.originalName = this.name;\r\n  }\r\n  reset() {\r\n    this.name = this.originalName;\r\n  }\r\n\r\n  remove() {\r\n    if (this.isRemovable()) {\r\n      this.onremove.emit(this);\r\n    }\r\n  }\r\n\r\n  formattedName() {\r\n    let result = this.name;\r\n    if (this.format) {\r\n\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n"
  ],
  "names": [
    "this",
    "el",
    "_tags",
    "_selectedindex",
    "onchange",
    "EventEmitter",
    "onselect",
    "beforeAction",
    "event",
    "placeholder",
    "selectedindex",
    "String",
    "tags",
    "x",
    "split",
    "map",
    "t",
    "_this",
    "push",
    "parseInt",
    "Array",
    "delineateby",
    "renderer",
    "setElementAttribute",
    "nativeElement",
    "canSelect",
    "selectionpolicy",
    "Selectionpolicy",
    "disabled",
    "indexOf",
    "index",
    "itemSelectedAt",
    "canRemove",
    "editpolicy",
    "EditPolicy",
    "addAndRemove",
    "removeOnly",
    "mintags",
    "length",
    "name",
    "canAdd",
    "addOnly",
    "maxtags",
    "isDuplicate",
    "tag",
    "maxtaglength",
    "join",
    "maxboxlength",
    "setElementClass",
    "emit",
    "id",
    "selecedIndex",
    "isRemovable",
    "request",
    "item",
    "i",
    "splice",
    "notifyChange",
    "allowedToaddItem",
    "click",
    "reset",
    "originalName",
    "to",
    "init",
    "sind",
    "source",
    "dind",
    "destination",
    "dragpolicy",
    "DragDropPolicy",
    "appendOnDrop",
    "action",
    "prependOnDrop",
    "swapOnDrop",
    "onTagFocus",
    "singleSelect",
    "list",
    "childNodes",
    "notifySelection",
    "TagBoxComponent",
    "type",
    "Component",
    "args",
    "selector",
    "template",
    "dataTransfer",
    "setData",
    "TagComponent",
    "prototype",
    "drag",
    "dragEnd",
    "stopPropagation",
    "drop",
    "dragEnter",
    "preventDefault",
    "allowDrop",
    "keyup",
    "target",
    "editor",
    "code",
    "editMode",
    "setTimeout",
    "filler",
    "selectedFiller",
    "fillerList",
    "which",
    "remove",
    "isSelectable",
    "isEditable",
    "focus",
    "onadd",
    "onfocus",
    "viewOnly",
    "isDraggable",
    "select",
    "tabout",
    "value",
    "edit",
    "updateFillerList",
    "autocomplete",
    "onremove",
    "formattedName",
    "result",
    "format",
    "decorators",
    "ctorParameters",
    "ElementRef",
    "Renderer",
    "Output",
    "ondrop",
    "Input",
    "removable",
    "maxlength",
    "ViewChild",
    "HostListener",
    "TagBoxModule",
    "CommonModule",
    "declarations"
  ],
  "mappings": "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"
}
